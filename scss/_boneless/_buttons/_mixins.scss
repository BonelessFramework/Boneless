/// Used to create button styles
/// @name button
/// @arg {string} $classname [btn] - classname of button styles
/// @arg {string} $size [medium] - size of button can be small, medium or large
/// @arg {color} $color [#888] - color of button
/// @arg {string} $type [border] - style of button can be border or solid
/// @output button styles defined by args passed in
/// @access public
/// @author Benjamin Hinchley
///
/// @example button mixin usage
///   @include button($classname: 'button', $color: #999);

@mixin button($classname: btn, $size: medium, $color: #888, $type: border) {
  .#{$classname} {
    // Every button
    display: inline-block;
    font-weight: 600;
    text-align: center;
    text-transform: uppercase;
    text-decoration: none;
    white-space: nowrap;
    background-color: transparent;
    border-radius: 4px;
    cursor: pointer;
    box-sizing: border-box;

    // Size
    @if $size == small {
      padding: 0 10px;
      font-size: 9.5px;
      height: 28px;
      line-height: 28px;
      letter-spacing: .11rem;
    } @else if $size == medium {
      padding: 0 30px;
      font-size: 11px;
      height: 38px;
      line-height: 38px;
      letter-spacing: .1rem;
    } @else if $size == large {
      padding: 0 40px;
      font-size: 16px;
      height: 58px;
      line-height: 58px;
      letter-spacing: .1rem;
    }

    // Type
    @if $type == border {
        border: 1px solid lighten($color, 10%);
        color: $color;
    } @else if $type == solid {
        border: 1px solid $color;
        background-color: $color;
        color: lighten($color, 100%);
    }
  }

  // Hover State
  .#{$classname}:hover,
  .#{$classname}:focus {
    outline: 0;

    @if $type == solid {
      background-color: darken($color,11%);
      border-color: darken($color,11%);
    } @else if $type == border {
      color: darken($color, 20%);
      border-color: darken($color, 15%);
    }
  }

}

/// Used to create button styles
/// @name buttonStyles
/// @arg {string} $size [medium] - size of button can be small, medium or large
/// @arg {color} $color [#888] - color of button
/// @arg {string} $type [border] - style of button can be border or solid
/// @output button styles defined by args passed in
/// @access public
/// @author Benjamin Hinchley
///
/// @example buttonStyles mixin usage
///   button,
///   input[type="button"] {
///     @include buttonStyles($color: #999);
///   }

@mixin buttonStyles($size: medium, $color: #888, $type: border) {
  & {
    // Every button
    display: inline-block;
    font-weight: 600;
    text-align: center;
    text-transform: uppercase;
    text-decoration: none;
    white-space: nowrap;
    background-color: transparent;
    border-radius: 4px;
    cursor: pointer;
    box-sizing: border-box;

    // Size
    @if $size == small {
      padding: 0 10px;
      font-size: 9.5px;
      height: 28px;
      line-height: 28px;
      letter-spacing: .11rem;
    } @else if $size == medium {
      padding: 0 30px;
      font-size: 11px;
      height: 38px;
      line-height: 38px;
      letter-spacing: .1rem;
    } @else if $size == large {
      padding: 0 40px;
      font-size: 16px;
      height: 58px;
      line-height: 58px;
      letter-spacing: .1rem;
    }

    // Type
    @if $type == border {
        border: 1px solid lighten($color, 10%);
        color: $color;
    } @else if $type == solid {
        border: 1px solid $color;
        background-color: $color;
        color: lighten($color, 100%);
    }
  }

  // Hover State
  &:hover,
  &:focus {
    outline: 0;

    @if $type == solid {
      background-color: darken($color,11%);
      border-color: darken($color,11%);
    } @else if $type == border {
      color: darken($color, 20%);
      border-color: darken($color, 15%);
    }
  }

}
